Problem Statement
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

First thoughts:
Potentially Multi pointer Problem Two pointers at the very least
Altering or merging arrays exceeds TLE
Direct length based computations is impractical as the overlap between the arrays is not known beforehand
Log(m+n) might indicate some dynamic window or atleaste successive reduction of search space by a factor. 
Median is position not value based.So function must reflect that.


Mental Model/Rough work:

For median 
......a10 |        | a20....
            MEDIAN            
 .... b5  |        | b40 ....     
Now median satisfies 
MEDIAN>a10 
MEDIAN>b5 
MEDIAN<a20
MEDIAN<b40

Now median satisfies 4 necessary conditions(per pointer) simultaneously 

Now until median is found 
 arr1 ....a4  P1 a5 ... a10 P2 a11...
arr2    ....b8 P3 b9.....b15 P4 b16..
we have to constantly shrink the walls until they converge 

a4<b9 and a5>b8 (P1+P3 act like a wall but two pointers per wall needed for separate arrays)
Similarly for right wall a10<b16 and a11>b15

For Edge case of pointer being on either extreme in either array:
Take the left side of the pointer at the start as -infinity 
And similarly +infinity for the pointer on right end 


Python 
from typing import list

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        # Ensure nums1 is the smaller array
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1

        m, n = len(nums1), len(nums2)
        total = m + n
        half = total // 2

        left, right = 0, m
        while True:
            i = (left + right) // 2
            j = half - i

            left1 = nums1[i-1] if i > 0 else float('-inf')
            right1 = nums1[i] if i < m else float('inf')
            left2 = nums2[j-1] if j > 0 else float('-inf')
            right2 = nums2[j] if j < n else float('inf')

            if left1 <= right2 and left2 <= right1:
                if total % 2:
                    return min(right1, right2)
                return (max(left1, left2) + min(right1, right2)) / 2
            elif left1 > right2:
                right = i - 1
            else:
                left = i + 1
