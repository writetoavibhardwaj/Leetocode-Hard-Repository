Problem Statement
We can scramble a string s to get a string t using the following algorithm:

If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

First thoughts:
1)Scramble nightmare
2)Can not "predict" the number of partitions or scramble sequence beforehand.We have to scramble and see.
3)Recursion and memoisation based
4)Index based slicing rather than actually changing the string
5)DFS over BFS as a correct/still-feasible path has to be explored Fully.

Key Concept:
Memoisation:Prevents blow up ie repitition of prev subcases and the cases are reused in recursion
Base cases: TO constantly check new substrings and store In dfs.
Clever indicing:To swap or not to swap functions

class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:
        memo = {}

        def dfs(x, y):
            if (x, y) in memo:
                return memo[(x, y)]

            # Base case 1: exact match
            if x == y:
                memo[(x, y)] = True
                return True

            if sorted(x) != sorted(y):
                memo[(x, y)] = False
                return False

            n = len(x)
            for i in range(1, n):
                # No swap case
                if dfs(x[:i], y[:i]) and dfs(x[i:], y[i:]):
                    memo[(x, y)] = True
                    return True
                if dfs(x[:i], y[-i:]) and dfs(x[i:], y[:-i]):
                    memo[(x, y)] = True
                    return True

            memo[(x, y)] = False
            return False

        return dfs(s1, s2)
 
