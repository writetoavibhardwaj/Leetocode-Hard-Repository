Problem Statement 
Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.
If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"

First Thoughts :
1)Opposite of DP problems done previously.
2)Shortest window dictates two pointer sliding window.
3)Keep track of current char count vs char count needed.
4)left pointer moves forward as long as above constraint is maintained.
5)Right pointer keeps moving forward.


Python Code
from collections import Counter, defaultdict

def minWindow(s: str, t: str) -> str:
    if not t or not s: 
        return ""

    need = Counter(t)
    have = defaultdict(int)
    required = len(need)   
    formed = 0

    res_len = float('inf')
    res_l = res_r = 0

    l = 0
    for r, ch in enumerate(s):
        have[ch] += 1
        if ch in need and have[ch] == need[ch]:
            formed += 1

        while formed == required:
            if (r - l + 1) < res_len:
                res_len = r - l + 1
                res_l, res_r = l, r

            left_ch = s[l]
            have[left_ch] -= 1
            if left_ch in need and have[left_ch] < need[left_ch]:
                formed -= 1
            l += 1

    return "" if res_len == float('inf') else s[res_l:res_r+1]
